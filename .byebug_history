c
q
window
@window
window
n
new_window
exit
@window
window
q
bc
c
bc
c
kkjjc
n
s
n
s
n
jump_to_first_match
@jump_to_first_match
jump_to_first_match
finished
s
c
finished
@jump_to_first_match
s
finished
c
s
finished
jump_to_first_match
c
jump_to_first_match
c
@jump_to_first_match
q
@jump_to_first_match
jump_to_first_match
s
n
finished
n
finished
n
finished
c
q
n
jump_to_first_match
s
n
s
n
finished
s
search_finished
n
s
n
c
n
search_finished
n
s
n
c
n
jump_to_first_match
bjump_to_first_match
q
bq
exit
xit
c
bc
c
search_finished
bsearch_finished
c
jump_to_first_match
bjump_to_firwst_match
c
n
@context.context
c
course_name
q
c
reg_pattern.match(course_name) == nil?
n == nil
reg_pattern.match(course_name)
n
reg_pattern.match(course_name)
reg_pattern
course_name
c
reg_pattern
c
reg_pattern
course_name
reg_pattern.match(course_name)
c
reg_pattern.match(course_name)
c
controller
c
controller
q
c
controller
n
controller
n
c
@context.secondary_context
ContextModel::CONTEXT_COURSES
controller
n
@context.secondary_context
c
cc
c_input[0..inputpos-1]
c_input[inputpos+1..-1]
c_input.size
inputpos
c_input
c
xpos
c
@window.curx
WINDOW_PROMPT
inputpos
c_input
c
ContextModel.instance.course_index
c
course
course["hash"]
c
course["hash"]
c
course["hash"]
couse["hash"
course
couse
c
course
c
course
c
course
c
course["hash"]
course["name"]
course
course["name"
course
c
course
c
course["name"]
course[:name]
course
c
n
event_obj
c
n
c
n
c_input
c
exit
abc
c
n
event_obj
c
asdf
c
n
event_obj[:event]
event_obj
asd
exit
event_obj
event
asdf
c
c_input
exit
c_input
c
exit
c_input
cinput
exit
event[:event]
event
@event
c
exit
event
event["event"]
event
c
exit
@context.context
@context
c
self.notify_observers("hello")
self.changed(true)
self.changed=true
self.notify_observers("hello")
self.observer
self.count_observers
self.observers
self
c
@controller.methods
@controller
n
@main_view.methods.grep(/draw/)
@main_view.methods
@main_view.instance_mthods
@main_view
@main_viewp 
c
Curses::Key::LEFT
input
[Dinput
